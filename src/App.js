// Code for the frontend of the application
// This code is responsible for the UI of the application
// It uses React to create the components and axios to make requests to the backend
// The components are:
// - ScheduledTopics: displays the scheduled topics
// - TrendReport: displays the trend report
// - ArticlesList: displays the articles
// - SearchBar: allows the user to search for a topic
// - ScheduleBar: allows the user to schedule a topic
// The App component is the main component that renders all the other components
// The App component also manages the state of the application

// Importing the necessary libraries
import React, {useState, useEffect} from 'react';
import './App.css';
import axios from 'axios';

function App() {
  // State variables
  const [topic, setTopic] = useState(''); // topic to search from the database and analyzed for the trend report
  const [config, setConfig] = useState([]); // topic to be added or deleted from the scheduled topics
  const [scheduled, setScheduled] = useState(''); // scheduled topics
  const [articles, setArticles] = useState([]); // articles related to the topic. It's a Jason object with the id, title, summary, published_date, and url
  const [trend, setTrend] = useState(''); // trend report for the topic. Generated by the AI model

  return (
    <div className="App">
      <h1>ðŸ“° AI News Trend Tracker</h1>
      <ScheduledTopics scheduled={scheduled} setScheduled={setScheduled} />
      <ScheduleBar config={config} setConfig={setConfig} />
      <SearchBar topic={topic} setTopic={setTopic} setArticles={setArticles} setTrend={setTrend} />
      <TrendReport trend={trend} />
      <ArticlesList articles={articles} />
    </div>
  );
}

function ScheduledTopics({ scheduled, setScheduled }) {
  const handleCheck = async () => {
    const configList = await axios.get(`http://localhost:5000/topics`);
    setScheduled(configList.data);
  }
  
  // If there are no scheduled topics, display a button to check the schedule
  if (!scheduled) return <button onClick={handleCheck}>Check schedule</button>;

  return (
    <div>
      <h2>Scheduled topics</h2>
      {scheduled.map((s) => (
        <div key={s.topic} style={{ borderBottom: '1px solid #ccc', padding: '1rem 0' }}>
          <div
            style={{ cursor: 'pointer', fontWeight: 'bold' }}
          >
            {s.topic}
          </div>
        </div>
      ))}
    </div>
  );
}

function TrendReport({ trend }) {
  if (!trend) return null;

  return (
    <div>
      <h2>AI-Powered Trend Report</h2>
      <pre>{trend}</pre>
    </div>
  );
}

function ArticlesList({ articles }) {
  const [expandedIds, setExpandedIds] = useState(new Set());
  // Toggle expansion for each article individually
  const toggleExpand = (id) => {
    setExpandedIds((prev) => {
      const newSet = new Set(prev); // create a new Set
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet; // return the new Set for rendering
    });
  };

  if (!articles.length) return null;

  return (
    <div>
      <h2>Articles</h2>
      {articles.map((a) => (
        <div key={a.id} style={{ borderBottom: '1px solid #ccc', padding: '1rem 0' }}>
          <div
            onClick={() => toggleExpand(a.id)}
            style={{ cursor: 'pointer', fontWeight: 'bold' }}
          >
            {a.title} <span style={{ color: '#999' }}>({a.published_date})</span>
          </div>

          {expandedIds.has(a.id) && (
            <div style={{ marginTop: '0.5rem' }}>
              <p><strong>Summary:</strong> {a.summary}</p>
              <p><strong>Link:</strong>
                <a href={a.url} target="_blank" rel="noreferrer">
                  {a.url}
                </a>
              </p>
            </div>
          )}
        </div>
      ))}
    </div>
  );
}


function SearchBar({ topic, setTopic, setArticles, setTrend }) {
  const handleSearch = async () => {
    if (!topic) return;

    const articleRes = await axios.get(`http://localhost:5000/search?topic=${topic}`);
    const trendRes = await axios.get(`http://localhost:5000/trend?topic=${topic}`);

    setArticles(articleRes.data.articles);
    setTrend(trendRes.data.trend_analysis);
  };
  return (
    <div>
      <input
        value={topic}
        onChange={(e) => setTopic(e.target.value)}
        placeholder="Topic trend analysis"
      />
      <button onClick={handleSearch}>Search</button>

    </div>
  );
}

function ScheduleBar({ config, setConfig, setScheduled }) {
  // Add a new topic to the schedule in the backend
  const handleAdd = async () => {
    if (!config) return;

    await fetch("http://localhost:5000/topics", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ class: config }),
    });
  }
  // Delete a topic from the schedule in the backend
  const handleDelete = async () => { 
    if (!config) return;

    await fetch("http://localhost:5000/topics-delete", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ class: config }),
    });
  }

  return (
    <div>
      
      <input
        value={config}
        onChange={(e) => setConfig(e.target.value)}
        placeholder="Topic scheduled to search"
      />
      <button onClick={handleAdd}>Add</button>
      <button onClick={handleDelete}>Delete</button>
    </div>
  );
}

export default App;